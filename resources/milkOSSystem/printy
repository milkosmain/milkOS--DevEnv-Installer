#!/bin/bash


function printy__banner() {
  local inputTitle=""
  local inputMessage=""
  local inputMessageSplit=""
  local inputInformation=""

  local terminalWidth=$(stty size | awk '{ print $2 }')

  for indexedInputArgument in "${@}"; do

    local parsedKey=""
    local parsedValue=""

    parsedKey=$(echo $indexedInputArgument | cut -d "=" -f1)
    parsedValue=$(echo $indexedInputArgument | cut -d "=" -f2)

    if [ "$parsedKey" = "title" ]; then
      inputTitle=$parsedValue
    fi
    
    if [ "$parsedKey" = "message" ]; then
      inputMessage=$parsedValue
    fi

    if [ "$parsedKey" = "information" ]; then
      inputInformation=$parsedValue
    fi
    
  done

  if [ -z "$inputTitle" ]; then
    echo -en "printy >> printy_banner >> no title provided. Exiting.\n"
    exit 1 
  fi

  if [ -z "${#inputMessage}" ]; then
    $inputMessage=""
  fi

  echo -en "${inputMessageSplit}\n"

  for inputMessageSplitLine in "$inputMessageSplit"; do
    echo -en "$inputMessageSplitLine\n"
  done


  local printyBanner_horizontalBorderCharacter="─"
  local printyBanner_verticalBorderCharacter="│"
  local printyBanner_cornerBorderTopLeftCharacter="╭"
  local printyBanner_cornerBorderTopRightCharacter="╮"
  local printyBanner_cornerBorderBottomLeftCharacter="╰"
  local printyBanner_cornerBorderBottomRightCharacter="╯"


  local printyBanner_top=$(
    echo -en "$printyBanner_cornerBorderTopLeftCharacter"
    for i in $(seq 1 $(( $terminalWidth - 2 )) );
      do echo -en "$printyBanner_horizontalBorderCharacter"
    done
    echo -en "$printyBanner_cornerBorderTopRightCharacter"
  )

  local printyBanner_title=$(
    echo -en "$printyBanner_verticalBorderCharacter"
    
    for i in $(seq 1 $(( $(( $(( ${terminalWidth} - ${#inputTitle} )) - 2 )) / 2 )) );
      do echo -en " "
    done

    echo -en "$inputTitle"

    for i in $(seq 1 $(( $(( $(( ${terminalWidth} - ${#inputTitle} )) - 1 )) / 2 )) );
      do echo -en " "
    done

    echo -en "$printyBanner_verticalBorderCharacter"

  )

  local printyBanner_padBottomOfTop=$(
    echo -en "$printyBanner_verticalBorderCharacter"
    
    for i in $(seq 1 $(( $(( $(( ${terminalWidth} )) - 2 )) / 2 )) );
      do echo -en " "
    done 


    for i in $(seq 1 $(( $(( $(( ${terminalWidth} )) - 1 )) / 2 )) );
      do echo -en " "
    done 

    echo -en "$printyBanner_verticalBorderCharacter"
  )

  function printyBanner_bodyRows() {
    local bodyRows=""
    local bodyRowSplitMessage=$(echo "$1" | fold -w $(( $terminalWidth - 22 )) -s)
    local bodyRowSplitMessageLineCount=$(( $( echo -en "$bodyRowSplitMessage" | sed '/^$/d' | wc -l | xargs ) + 1 ))

    # echo -en "$bodyRowSplitMessage\n" >&2
    # loop through seq of line counts
    # print char-sets in line # loop
    for bodyRowSplitMessageLineNum in $(seq 1 $bodyRowSplitMessageLineCount); do
      local bodyRowSplitMessageLine=$(echo "$bodyRowSplitMessage" | sed '/^$/d' | sed -n "${bodyRowSplitMessageLineNum}p")
      local bodyRowSplitMessageLineRemainingWidth=$(( $terminalWidth - 2 - ${#bodyRowSplitMessageLine} ))
      bodyRows=$(echo -en "$bodyRows$printyBanner_verticalBorderCharacter")

      bodyRows=$(echo -en "$bodyRows$bodyRowSplitMessageLine")

      for i in $(seq 1 $bodyRowSplitMessageLineRemainingWidth); do
        bodyRows=$(echo -en "$bodyRows ")
      done

      bodyRows=$(echo -en "$bodyRows$printyBanner_verticalBorderCharacter\n")

      # empty lines print spaces ;(
      if [ -z "${newLineBodyContentSplitMessageLine+x}" ]; then
        newLineBodyContentSplitMessageLine=" "
      fi
    
    done

    echo -en "$bodyRows"
  }

  local printyBanner_bottom=$(
    echo -en "$printyBanner_cornerBorderBottomLeftCharacter"
    for i in $(seq 1 $(( $terminalWidth - 2 )) ); do
      echo -en "$printyBanner_horizontalBorderCharacter"
    done
    echo -en "$printyBanner_cornerBorderBottomRightCharacter"
  )


  local printyBanner=$(
    echo -en "\e[2K\e[2K\e[2K\r"
    echo -en "$printyBanner_top\n"
    echo -en "$printyBanner_title\n"
    echo -en "$printyBanner_padBottomOfTop\n"
    echo -en  "$(printyBanner_bodyRows "$inputMessage")"

    if [ ! -z "$inputInformation" ]; then
      ## split on ::
      local bodyInformationSplit=$(echo "$inputInformation" | sed 's/::/\n/g' )
      echo "$(printyBanner_bodyRows "$bodyInformationSplit")"
    fi
    echo -en "$printyBanner_bottom\n"

  )

  echo -en "$printyBanner\n"

}

function printy__style_determineCode() {
  local initEscapeCode="\e["
  local layer=$(echo "$1" | cut -d '@' -f1)
  local layerCode=""
  local style=$(echo "$1" | cut -d '@' -f2)
  local styleCode=""
  local rgbCode=""
  local isStyleRGB=0

  case "$layer" in
    bg) layerCode="48;" ;;
    fg) layerCode="38;" ;;
  esac

  case "$style" in
    black) styleCode="0;0;0" isStyleRGB=1;;
    white) styleCode="255;255;255" isStyleRGB=1;;
    gray) styleCode="60;60;60" isStyleRGB=1;;
    red) styleCode="255;0;0" isStyleRGB=1;;
    flatred) styleCode="200;70;10" isStyleRGB=1;;
    green) styleCode="0;255;0" isStyleRGB=1;;
    flatgreen) styleCode="0;90;55" isStyleRGB=1;;
    blue) styleCode="0;0;255" isStyleRGB=1;;
    flatblue) styleCode="0;90;225" isStyleRGB=1;;
    cyan) styleCode="0;255;255" isStyleRGB=1;;
    magenta) styleCode="255;0;255" isStyleRGB=1;;
    yellow) styleCode="255;255;0" isStyleRGB=1;;
    flatyellow) styleCode="200;200;70" isStyleRGB=1;;
    orange) styleCode="255;165;0" isStyleRGB=1;;
    orangered) styleCode="255;69;0" isStyleRGB=1;;
    mint) styleCode="61;200;150" isStyleRGB=1;;
    gold) styleCode="255;204;14" isStyleRGB=1;;
    purple) styleCode="150;52;206" isStyleRGB=1;;

  esac

  case "$style" in
    bold) styleCode="1" ;;
    italic) styleCode="3" ;;
    under | underline) styleCode="4" ;;
    cross | crossout) styleCode="9" ;;
    strikethrough ) styleCode="6" ;;
    reverse ) styleCode="7" ;;
  esac


  if [ $isStyleRGB = 1 ]; then
    rgbCode="2;"
  fi

  echo -en "${initEscapeCode}${layerCode}${rgbCode}${styleCode}m"
}

function printy__style() {
  local printyStyleCodeStack=""
  local resetCode="\e[0m"
  local outputMessage=""

  local inputArgumentCountLoop=0
  for inputArgument in "$@"; do
    if [ $inputArgument = "@style" ]; then
      continue
    fi
    local isStylizeStatement=$(echo "$inputArgument" | grep -E "^(bg|fg)@")
    if [ "$isStylizeStatement" ]; then
      local argumentStyleCode=$(printy__style_determineCode "$inputArgument")
      printyStyleCodeStack="$printyStyleCodeStack$argumentStyleCode"
    fi
    if [ -z "$isStylizeStatement" ]; then

      if [ $inputArgument = "@continue" ]; then
        resetCode=""
      else
        outputMessage="$inputArgument"
      fi
    fi

  done
  


  echo -en "${printyStyleCodeStack}${outputMessage}${resetCode}"

}


function printy() {
  local printyStyle1=""
  local printyStyle2=""
  local printyMessage=""
  local resetCode="\e[0m"
  local newline=""

  if [ -z "$1" ]; then
    printf "There was no colorize statement or message provided to milkOSDevEnv_tools/printy >> printy()\n"
    return 1
  fi


  if [ "$1" = "@banner" ]; then
    printy__banner "$@"
    return 0
  fi

  if [ "$1" = "@style" ]; then
    printy__style "$@"
    return 0
  fi

  if [ "$1" = "@reset" ]; then
    echo -en "\e[0m"
    return 0
  fi
}