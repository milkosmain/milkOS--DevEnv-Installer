#!/bin/bash


function printy_banner() {
  local inputTitle=""
  local inputMessage=""
  local inputMessageSplit=""

  local terminalWidth=$(stty size | awk '{ print $2 }')

  for indexedInputArgument in "${@}"; do

    local parsedKey=""
    local parsedValue=""

    parsedKey=$(echo $indexedInputArgument | cut -d "=" -f1)
    parsedValue=$(echo $indexedInputArgument | cut -d "=" -f2)

    if [ "$parsedKey" = "title" ]; then
      inputTitle=$parsedValue
    fi
    
    if [ "$parsedKey" = "message" ]; then
      inputMessage=$parsedValue
    fi
    
  done

  if [ -z "$inputTitle" ]; then
    echo -en "printy >> printy_banner >> no title provided. Exiting.\n"
    exit 1 
  fi

  if [ -z "${#inputMessage}" ]; then
    $inputMessage=""
  fi

  echo -en "${inputMessageSplit}\n"

  for inputMessageSplitLine in "$inputMessageSplit"; do
    echo -en "$inputMessageSplitLine\n"
  done


  local printyBanner_horizontalBorderCharacter="─"
  local printyBanner_verticalBorderCharacter="│"
  local printyBanner_cornerBorderTopLeftCharacter="╭"
  local printyBanner_cornerBorderTopRightCharacter="╮"
  local printyBanner_cornerBorderBottomLeftCharacter="╰"
  local printyBanner_cornerBorderBottomRightCharacter="╯"


  local printyBanner_top=$(
    echo -en "$printyBanner_cornerBorderTopLeftCharacter"
    for i in $(seq 1 $(( $terminalWidth - 2 )) );
      do echo -en "$printyBanner_horizontalBorderCharacter"
    done
    echo -en "$printyBanner_cornerBorderTopRightCharacter"
  )

  local printyBanner_title=$(
    echo -en "$printyBanner_verticalBorderCharacter"
    
    for i in $(seq 1 $(( $(( $(( ${terminalWidth} - ${#inputTitle} )) - 2 )) / 2 )) );
      do echo -en " "
    done

    echo -en "$inputTitle"

    for i in $(seq 1 $(( $(( $(( ${terminalWidth} - ${#inputTitle} )) )) / 2 )) );
      do echo -en " "
    done

    echo -en "$printyBanner_verticalBorderCharacter"

  )

  local printyBanner_padBottomOfTop=$(
    echo -en "$printyBanner_verticalBorderCharacter"
    
    for i in $(seq 1 $(( $(( $(( ${terminalWidth} )) - 2 )) / 2 )) );
      do echo -en " "
    done 

    # echo -en "$inputTitle"

    for i in $(seq 1 $(( $(( $(( ${terminalWidth} )) )) / 2 )) );
      do echo -en " "
    done 

    echo -en "$printyBanner_verticalBorderCharacter"
  )

  function printyBanner_bodyRows() {
    bodyRowSplitMessage=$(echo "$1" | fold -w $(( $terminalWidth - 22 )) -s)
    bodyRowSplitMessageLineCount=$(( $( echo -en "$bodyRowSplitMessage" | sed '/^$/d' | wc -l | xargs ) + 1 ))

    # loop through seq of line counts
    # print char-sets in line # loop
    for bodyRowSplitMessageLineNum in $(seq 1 $bodyRowSplitMessageLineCount); do
      local bodyRowSplitMessageLine=$(echo "$bodyRowSplitMessage" | sed '/^$/d' | sed -n "${bodyRowSplitMessageLineNum}p")
      local bodyRowSplitMessageLineRemainingWidth=$(( $terminalWidth - 2 - ${#bodyRowSplitMessageLine} ))
      echo -en "$printyBanner_verticalBorderCharacter"

      echo -en "$bodyRowSplitMessageLine"

      for i in $(seq 1 $bodyRowSplitMessageLineRemainingWidth); do
        echo -en " "
      done

      echo -en "$printyBanner_verticalBorderCharacter\n"

      # empty lines print spaces ;(
      if [ -z "${newLineBodyContentSplitMessageLine+x}" ]; then
        newLineBodyContentSplitMessageLine=" "
      fi
    
    done
  }

  local printyBanner_bottom=$(
    echo -en "$printyBanner_cornerBorderBottomLeftCharacter"
    for i in $(seq 1 $(( $terminalWidth - 2 )) ); do
      echo -en "$printyBanner_horizontalBorderCharacter"
    done
    echo -en "$printyBanner_cornerBorderBottomRightCharacter"
  )


  local printyBanner=$(
    echo -en "$printyBanner_top\n"
    echo -en "$printyBanner_title\n"
    echo -en "$printyBanner_padBottomOfTop\n"
    echo -en "$(printyBanner_bodyRows "$inputMessage")"
    echo -en "$printyBanner_bottom\n"

  )

  echo -en "$printyBanner\n"

}

function printy_stylizeText() {
  local initEscapeCode="\e["
  local layer=$(echo "$1" | cut -d '@' -f1)
  local layerCode=""
  local style=$(echo "$1" | cut -d '@' -f2)
  local styleCode=""
  local rgbCode=""
  local isStyleRGB=0

  case "$layer" in
    bg) layerCode="48;" ;;
    fg) layerCode="38;" ;;
  esac

  case "$style" in
    black) styleCode="0;0;0" isStyleRGB=1;;
    white) styleCode="255;255;255" isStyleRGB=1;;
    red) styleCode="255;0;0" isStyleRGB=1;;
    green) styleCode="0;255;0" isStyleRGB=1;;
    blue) styleCode="0;0;255" isStyleRGB=1;;
    cyan) styleCode="0;255;255" isStyleRGB=1;;
    magenta) styleCode="255;0;255" isStyleRGB=1;;
    yellow) styleCode="255;255;0" isStyleRGB=1;;
    orange) styleCode="255;165;0" isStyleRGB=1;;
    orangered) styleCode="255;69;0" isStyleRGB=1;;
    mint) styleCode="61;200;150" isStyleRGB=1;;

  esac

  case "$style" in
    bold) styleCode="1" ;;
    italic) styleCode="3" ;;
    under | underline) styleCode="4" ;;
    cross | crossout) styleCode="9" ;;
    strikethrough ) styleCode="6" ;;
    reverse ) styleCode="7" ;;
  esac


  if [ $isStyleRGB = 1 ]; then
    rgbCode="2;"
  fi

  echo -en "${initEscapeCode}${layerCode}${rgbCode}${styleCode}m"
}



function printy() {
  local printyStyle1=""
  local printyStyle2=""
  local printyMessage=""
  local resetCode="\e[0m"
  local newline=""

  if [ -z "$1" ]; then
    printf "There was no colorize statement or message provided to milkOSDevEnv_tools/printy >> printy()\n"
    return 1
  fi

  if [ "$1" = "reset" ]; then
    printf "\e[0m"
    return 0
  fi

  arg1_isStylizeStatement=$(echo "$1" | grep -E "^(bg|fg)@")
  if [ ! -z "$arg1_isStylizeStatement" ]; then
    if  [[ $(echo "$1" | grep -o -E "(\~|\,|\.|\+)") ]]; then
      local layer=$(echo "$1" | cut -d '@' -f1)
      for colorOnConstructor in $(echo "$1" | cut -d '@' -f2 | sed -e 's/[~,.+]/\ /g'); do
        printyStyle1="${printyStyle1}$(printy_stylizeText "${layer}@${colorOnConstructor}")"
      done
    else
      printyStyle1=$(printy_stylizeText "$1")
    fi
  elif [ "$1" = "@banner" ]; then
    printy_banner "$@"
    return 0
  elif [ -n "$1" ]; then
    printyMessage="${printyMessage}${1}"
  fi

  arg2_isStylizeStatement=$(echo "$2" | grep -E "^(bg|fg)@")
  if [ ! -z "$arg2_isStylizeStatement" ]; then  
    if  [[ $(echo "$2" | grep -o -E "(\~|\,|\.|\+)") ]]; then
      local layer=$(echo "$2" | cut -d '@' -f1)
      for colorOnConstructor in $(echo "$2" | cut -d '@' -f2 | sed -e 's/[~,.+]/\ /g'); do
        printyStyle2="${printyStyle2}$(printy_stylizeText "${layer}@${colorOnConstructor}")"
      done
    else
      printyStyle2=$(printy_stylizeText "$2")
    fi
  elif [ "$2" = "@continue" ]; then
    resetCode=""
  elif [ "$2" = "@reset" ]; then
    resetCode="\e[0m"
  elif [ -n "$2" ]; then
    printyMessage="${printyMessage}${2}"
  fi

  if [ "$3" = "@continue" ]; then
    resetCode=""
  elif [ "$3" = "@reset" ]; then
    resetCode="\e[0m"
  elif [ -n "$3" ]; then
    printyMessage="${printyMessage}${3}"
  fi

  

  if [[ $(echo "$printyMessage" | grep -o -E "\\\n") ]]; then
    printyMessage=$(echo "$printyMessage" | sed 's/\\n//')
    newline="\n"
  fi

  echo -en "${printyStyle1}${printyStyle2}${printyMessage}${resetCode}${newline}"

}